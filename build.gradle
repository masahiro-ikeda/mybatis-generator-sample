buildscript {
    ext {
        // SpringBoot
        springBootVersion = '2.1.5.RELEASE'

        // MysqlConnector
        mysqlConnectorJavaVersion = '5.1.47'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'com.sample.mybatis-generator'
version '1.0-SNAPSHOT'

sourceCompatibility = '11'

repositories {
    mavenCentral()
}

configurations {
    mybatisGenerator
}

dependencies {
    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-devtools'

    // Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf:thymeleaf:3.0.9.RELEASE'
    implementation 'org.thymeleaf:thymeleaf-spring4:3.0.9.RELEASE'

    // DataSource
    implementation "mysql:mysql-connector-java:${mysqlConnectorJavaVersion}"

    // Mybatis
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.0.1'

    // MyBatisGenerator
    mybatisGenerator "org.mybatis.generator:mybatis-generator-core:1.3.7"
    mybatisGenerator "mysql:mysql-connector-java:${mysqlConnectorJavaVersion}"
}

//**************************************
// Mybatis Generator task
//**************************************

task mybatisGenerator {
    doLast {
        def datasource = new Properties()
        file('src/main/resources/common/datasource.properties').withInputStream { inputStream ->
            datasource.load(inputStream)
        }
        ant.properties['driverClass'] = datasource.getProperty('datasource.mysql.driver-class')
        ant.properties['connectionURL'] = datasource.getProperty('datasource.mysql.url')
        ant.properties['userId'] = datasource.getProperty('datasource.mysql.username')
        ant.properties['password'] = datasource.getProperty('datasource.mysql.password')
        ant.properties['schema'] = datasource.getProperty('datasource.mysql.schema')

        def config = new Properties()
        file('src/main/resources/generator/generator_config.properties').withInputStream { inputStream ->
            config.load(inputStream)
        }
        ant.properties['targetProject'] = config.getProperty('target.project')
        ant.properties['modelPackage'] = config.getProperty('package.model')
        ant.properties['mapperPackage'] = config.getProperty('package.mapper')
        
        ant.taskdef(name: 'mbgenerator', classname: 'org.mybatis.generator.ant.GeneratorAntTask', classpath: configurations.mybatisGenerator.asPath)
        ant.mbgenerator(overwrite: true, configfile: "$projectDir/src/main/resources/generator/generator_config.xml", verbose: true) {
            propertyset {
                propertyref(name: 'targetProject')
                propertyref(name: 'userId')
                propertyref(name: 'driverClass')
                propertyref(name: 'connectionURL')
                propertyref(name: 'password')
                propertyref(name: 'masterSchema')
                propertyref(name: 'userSchema')
                propertyref(name: 'modelPackage')
                propertyref(name: 'mapperPackage')
                propertyref(name: 'sqlMapperPackage')
            }
        }
    }
}

// mybatisGeneratorのタスクグループ
mybatisGenerator.group = 'mybatis'